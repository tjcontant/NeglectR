[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 NeglectR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/df_apply-vignette.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"df_apply-vignette","text":"","code":"library(NeglectR)"},{"path":"/articles/df_apply-vignette.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"df_apply-vignette","text":"function df_apply designed apply function specific columns data frame based filtering function. Columns filter function returns true modified function. process, order columns preserved.","code":""},{"path":"/articles/df_apply-vignette.html","id":"usage","dir":"Articles","previous_headings":"","what":"Usage","title":"df_apply-vignette","text":"following example, exhibit functionalities df_apply using presidents data frame. data use. want modify logical columns FALSE TRUE replaced numbers zero one, respectively. change can achieved using .numeric function. following chunk code, implement change using df_apply.","code":"presidents #>                   name begin_year born_in_michigan #> 1   Geert Egberts Boer       1876            FALSE #> 2  Albertus John Rooks       1900             TRUE #> 3     John J. Hiemenga       1919            FALSE #> 4      Johannes Broene       1925             TRUE #> 5      Rienk B. Kuiper       1930            FALSE #> 6           Ralph Stob       1933            FALSE #> 7       Henry Schultze       1940            FALSE #> 8     William Spoelhof       1951            FALSE #> 9   Anthony J. Diekema       1976             TRUE #> 10     Gaylen J. Byker       1995            FALSE #> 11   Michael K. Le Roy       2012            FALSE #> 12       Wiebe K. Boer       2022            FALSE df_apply(.data = presidents, .fun =  as.numeric, .filt = is.logical) #>                   name begin_year born_in_michigan #> 1   Geert Egberts Boer       1876                0 #> 2  Albertus John Rooks       1900                1 #> 3     John J. Hiemenga       1919                0 #> 4      Johannes Broene       1925                1 #> 5      Rienk B. Kuiper       1930                0 #> 6           Ralph Stob       1933                0 #> 7       Henry Schultze       1940                0 #> 8     William Spoelhof       1951                0 #> 9   Anthony J. Diekema       1976                1 #> 10     Gaylen J. Byker       1995                0 #> 11   Michael K. Le Roy       2012                0 #> 12       Wiebe K. Boer       2022                0"},{"path":"/articles/plotly-maps.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"plotly-maps","text":"thinking inventions human history, maps arguably one important. ancient cave drawings smartphone apps, millenia maps enabled us understand relationships objects given space. vignette, highlight ways create geometries data contains spacial dimensions. specifically, outline basics interactive map creation using plotly, package creating interactive plots comparability R. creating maps, need load plotly package working environment.","code":"library(plotly)"},{"path":"/articles/plotly-maps.html","id":"chloropleth-maps","dir":"Articles","previous_headings":"","what":"Chloropleth Maps","title":"plotly-maps","text":"chloropleth map created creating associations variable geographic regions. often looks like assigning various asthetics, like color, location-based glyphs. Let’s learn create one chloropleth maps using plotly. begin, need sort geometry information, file delineates various geogrpahic regions positions relative one another. install geometries like form GeoJSON file, stick geometries built Plotly: world map US map.","code":""},{"path":"/articles/plotly-maps.html","id":"world-map","dir":"Articles","previous_headings":"Chloropleth Maps","what":"World Map","title":"plotly-maps","text":"process making map can broken three steps. First ’ll load data regarding countries’ gross domestic product (GDP). performed log transformation GDP extreme outliers, making better coloring. Next, ’ll create object story maps geometrical asthetics. Finally, ’ll create map using plot_geo() add_trace(). functions used stylize map. One beneficial features map allows one zoom . Therefore, user can clearly see countries may visible larger scale.","code":"df <- read.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/2014_world_gdp_with_codes.csv\")  df <- df |> mutate(log_gdp = log(GDP..BILLIONS.)) # geo styling g <- list(   scope = 'world',   projection = list(type = 'albers world'),   showlakes = TRUE,   lakecolor = toRGB('white') ) # set location to only USA using locationmode world_chloro <- plot_geo(df, locationmode = 'world') |>   add_trace(z = ~log_gdp,              locations = ~CODE,              color = ~log_gdp) |>   # add title to legend   colorbar(title = \"log(Millions USD)\") |>   layout(     # add title to map     title = '2011 US Fruit Exports by State',     # link geomtry asthetics     geo = g   )  world_chloro"},{"path":"/articles/plotly-maps.html","id":"united-states-map","dir":"Articles","previous_headings":"Chloropleth Maps","what":"United States Map","title":"plotly-maps","text":"plot, highlight basic features Plotly. ’ll begin, , uploading needed data. data frame contains information amounts various foods Now, can start building map. Let’s say wanted analyze differences fruit production across United States. can see areas greatest fruit production include West Midwest. However, graph may lead false associations states fruit production. see California produces lot fruit, areas . Furthermore, given big California, higher fruit production may just result bigger states. work need done create graphs. general, easy create map using Plotly, difficult, regardless software using, create good map.","code":"df <- read.csv(\"https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv\") # geo styling g <- list(   scope = 'usa',   projection = list(type = 'albers usa'),   showlakes = TRUE,   lakecolor = toRGB('white') )  # set location to only USA using locationmode usa_chloro <- plot_geo(df, locationmode = 'USA-states') |>   add_trace(z = ~total.exports,              locations = ~code,              color = ~total.exports,              colors = 'Greens') |>   # add title to legend   colorbar(title = \"Millions USD\") |>   layout(     # add title to map     title = '2011 US Fruit Exports by State',     # link geomtry asthetics     geo = g   )  usa_chloro"},{"path":"/articles/plotly-maps.html","id":"scatter-plots-on-maps","dir":"Articles","previous_headings":"","what":"Scatter Plots on Maps","title":"plotly-maps","text":"Another common task plot points given geometry. example, may want plot points Starbucks locations United States. Plotly, really easy! First, let’s load Starbucks data. Time make map!","code":"# load in data df <- read.csv(\"https://raw.githubusercontent.com/libjohn/mapping-with-R/master/data/All_Starbucks_Locations_in_the_US_-_Map.csv\")  # replace NA with 'None' for `Features - Stations` column df$drive_through = df$`Features...Stations` |> tidyr::replace_na('None') # geo styling g <- list(   scope = 'usa',   projection = list(type = 'albers usa'),   showland = TRUE,   landcolor = toRGB(\"gray95\"),   subunitcolor = toRGB(\"gray85\"),   countrycolor = toRGB(\"gray85\"),   countrywidth = 0.5,   subunitwidth = 0.5 )  starbucks_fig <- plot_geo(df, lat = ~Latitude, lon = ~Longitude) |>    add_markers(     color = ~drive_through,      symbol = I(\"circle\"),      size = I(8),      alpha = I(0.2),     hoverinfo = \"text\"   ) |>   colorbar(title = \"Incoming flights<br />February 2011\") |>   layout(     title = 'US Starbucks Locations',      geo = g   )  starbucks_fig"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"First Last. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Last F (2023). NeglectR: Package (One Line, Title Case). R package version 0.0.0.9000.","code":"@Manual{,   title = {NeglectR: What the Package Does (One Line, Title Case)},   author = {First Last},   year = {2023},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"neglectr","dir":"","previous_headings":"","what":"What the Package Does (One Line, Title Case)","title":"What the Package Does (One Line, Title Case)","text":"goal NeglectR …","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"What the Package Does (One Line, Title Case)","text":"can install development version NeglectR like :","code":"# install.packages(\"devtools\") devtools::install_github(\"adhamrishmawi1/NegletR\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"What the Package Does (One Line, Title Case)","text":"example, say want modify logical columns FALSE TRUE replaced numbers zero one, respectively. change can achieved using .numeric function. following chunk code, implement change using df_apply.","code":"library(NeglectR) df_apply(.data = presidents, .fun =  as.numeric, .filt = is.logical)"},{"path":"/reference/data1.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataframe — data1","title":"Example dataframe — data1","text":"Example dataframe","code":""},{"path":"/reference/data1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataframe — data1","text":"","code":"data1"},{"path":"/reference/data1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataframe — data1","text":"object class data.frame 3 rows 4 columns.","code":""},{"path":"/reference/df_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply alteration to data frame — df_apply","title":"Apply alteration to data frame — df_apply","text":"Apply alteration data frame","code":""},{"path":"/reference/df_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply alteration to data frame — df_apply","text":"","code":"df_apply(.data, .fun, .filter, ...)"},{"path":"/reference/df_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply alteration to data frame — df_apply","text":".data data frame alter. .fun function can applied column data frame return column data frame. .filter function can applied columns data frame returns TRUE FALSE. ... Optional arguments .fun.","code":""},{"path":"/reference/df_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply alteration to data frame — df_apply","text":"modified data frame columns original order.","code":""},{"path":"/reference/df_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply alteration to data frame — df_apply","text":"","code":"funct <- function(.int, .sigfigs) {return(signif((.int * 2), .sigfigs))} df_apply(presidents, funct, is.numeric, .sigfigs = 2) #>                   name begin_year born_in_michigan #> 1   Geert Egberts Boer       3800            FALSE #> 2  Albertus John Rooks       3800             TRUE #> 3     John J. Hiemenga       3800            FALSE #> 4      Johannes Broene       3800             TRUE #> 5      Rienk B. Kuiper       3900            FALSE #> 6           Ralph Stob       3900            FALSE #> 7       Henry Schultze       3900            FALSE #> 8     William Spoelhof       3900            FALSE #> 9   Anthony J. Diekema       4000             TRUE #> 10     Gaylen J. Byker       4000            FALSE #> 11   Michael K. Le Roy       4000            FALSE #> 12       Wiebe K. Boer       4000            FALSE"},{"path":"/reference/presidents.html","id":null,"dir":"Reference","previous_headings":"","what":"Calvin University's Presidents — presidents","title":"Calvin University's Presidents — presidents","text":"data frame collection information Calvin University's presidents.","code":""},{"path":"/reference/presidents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calvin University's Presidents — presidents","text":"","code":"presidents"},{"path":"/reference/presidents.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Calvin University's Presidents — presidents","text":"data frame 12 observations 3 variables. name              name president begin_year        year president took office born_in_michigan  whether born Michigan","code":""},{"path":"/reference/presidents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calvin University's Presidents — presidents","text":"","code":"if(require(ggplot2)) {   presidents |>     ggplot(aes(y = begin_year, color = born_in_michigan)) +     geom_boxplot() } #> Loading required package: ggplot2"}]
